1
00:00:05,000 --> 00:00:08,060
當我一直在用大型語言模型構建應用程序時

2
00:00:08,060 --> 00:00:10,240
我想我從來沒有在第一次嘗試時

3
00:00:10,240 --> 00:00:13,560
就把提示詞用對

4
00:00:13,560 --> 00:00:15,180
因為這並不是最重要的

5
00:00:15,180 --> 00:00:19,860
只要你有一個好的迭代過程，能讓你的提示語變得更好

6
00:00:19,860 --> 00:00:22,100
那麼你就能找到一些

7
00:00:22,100 --> 00:00:24,680
對任務實現效果較好的提示詞

8
00:00:24,680 --> 00:00:28,000
你可能聽我說過，當我訓練一個機器學習模型時

9
00:00:28,000 --> 00:00:29,920
它幾乎從來沒有第一次就成功過

10
00:00:29,920 --> 00:00:33,360
事實上，我很驚訝我訓練的第一個模型能起作用

11
00:00:33,360 --> 00:00:37,160
我認為我們在使用提示時，它第一次工作的機率可能會高一點

12
00:00:37,160 --> 00:00:39,640
但正如她所說

13
00:00:39,640 --> 00:00:42,060
第一次提示是否有效並不重要

14
00:00:42,060 --> 00:00:46,640
最重要的是獲得提示的過程對你的應用有用

15
00:00:46,640 --> 00:00:49,520
因此，讓我們跳進代碼，讓我向你展示

16
00:00:49,520 --> 00:00:53,680
一些框架來思考如何迭代開發一個提示

17
00:00:53,680 --> 00:00:57,840
好的。如果你以前和我一起上過機器學習課

18
00:00:57,840 --> 00:01:02,760
你可能見過我用一張圖說，在機器學習開發中

19
00:01:02,760 --> 00:01:06,440
你經常有一個想法，然後實現它

20
00:01:06,440 --> 00:01:08,780
所以寫代碼，獲取數據

21
00:01:08,780 --> 00:01:12,720
訓練你的模型，這就給了你一個實驗性的結果

22
00:01:12,720 --> 00:01:14,380
然後你就可以看一下這個輸出

23
00:01:14,380 --> 00:01:16,080
也許做錯誤分析

24
00:01:16,080 --> 00:01:17,760
找出它在什麼地方起作用或不起作用

25
00:01:17,760 --> 00:01:19,760
然後甚至可能改變你的想法

26
00:01:19,760 --> 00:01:23,120
你想解決什麼問題或如何處理它

27
00:01:23,120 --> 00:01:25,680
然後改變實施方案

28
00:01:25,680 --> 00:01:27,920
運行另一個實驗等等，如此反复

29
00:01:27,920 --> 00:01:31,100
來得到 一個有效的機器學習模型

30
00:01:31,100 --> 00:01:33,160
如果你對機器學習不熟悉

31
00:01:33,160 --> 00:01:35,240
沒見過這張圖，不用擔心

32
00:01:35,240 --> 00:01:38,200
對於本演講的其餘部分來說，並不那麼重要

33
00:01:38,200 --> 00:01:44,880
但是當你在寫提示，使用LLM開發一個應用程序時

34
00:01:44,880 --> 00:01:48,300
這個過程可以說是非常相似的

35
00:01:48,300 --> 00:01:50,580
你有一個關於你想做什麼的想法

36
00:01:50,580 --> 00:01:52,040
你想完成的任務

37
00:01:52,040 --> 00:01:55,880
然後你就可以初步嘗試編寫

38
00:01:55,880 --> 00:01:59,400
希望能有一個清晰而具體的提示

39
00:01:59,400 --> 00:02:01,560
如果合適的話

40
00:02:01,560 --> 00:02:04,120
給予系統思考的時間

41
00:02:04,120 --> 00:02:07,760
然後你可以運行它，看看你得到什麼結果

42
00:02:07,760 --> 00:02:10,120
如果第一次的效果不夠好

43
00:02:10,120 --> 00:02:13,840
那麼，就需要反复的過程來弄清楚為什麼指令

44
00:02:13,840 --> 00:02:15,960
例如，為什麼指令不夠清楚，或者為什麼它

45
00:02:15,960 --> 00:02:17,760
為什麼沒有給算法足夠的時間來思考

46
00:02:17,760 --> 00:02:19,360
這樣你就可以完善這個想法了

47
00:02:19,360 --> 00:02:21,260
完善提示，以此類推

48
00:02:21,260 --> 00:02:23,240
並在此基礎上進行多次循環

49
00:02:23,240 --> 00:02:26,200
直到你最終得到一個適用於你的應用的提示

50
00:02:26,200 --> 00:02:32,320
這也是為什麼我個人沒有那麼多關注

51
00:02:32,320 --> 00:02:35,840
網上那些說有30個完美提示詞的文章，因為我認為

52
00:02:35,840 --> 00:02:39,720
可能沒有一個完美的提示適用於世間萬物

53
00:02:39,720 --> 00:02:42,000
更重要的是，你要有一個過程，用於

54
00:02:42,000 --> 00:02:45,440
為你的特定應用挖掘出一個好的提示

55
00:02:45,440 --> 00:02:49,000
因此，讓我們一起看下一個代碼中的例子

56
00:02:49,000 --> 00:02:51,400
前面的影片中你所看到的初始代碼

57
00:02:51,400 --> 00:02:54,440
已導入了openai和os

58
00:02:54,440 --> 00:02:58,240
這裡我們得到了OpenAI的API密鑰

59
00:02:58,240 --> 00:03:02,280
這也是你上次看到的那個輔助函數

60
00:03:02,280 --> 00:03:08,440
在這個影片中，我將使用這個例子

61
00:03:08,440 --> 00:03:12,680
為一張椅子寫一份信息表

62
00:03:12,680 --> 00:03:16,280
所以讓我把它粘貼在這裡

63
00:03:16,280 --> 00:03:19,720
你可以選擇隨時暫停影片

64
00:03:19,720 --> 00:03:23,120
在左邊的Notebook上仔細地閱讀這些代碼

65
00:03:23,120 --> 00:03:26,800
但這裡是一份椅子情況說明，上面寫著

66
00:03:26,800 --> 00:03:30,320
它的靈感來自於一個華麗中世紀家族，等等

67
00:03:30,320 --> 00:03:31,920
談到了結構

68
00:03:31,920 --> 00:03:34,680
有尺寸，椅子的選擇

69
00:03:34,680 --> 00:03:38,240
材料等等。它來自意大利

70
00:03:38,240 --> 00:03:42,960
因此，假設你想拿著這份概況介紹，幫助營銷團隊

71
00:03:42,960 --> 00:03:47,880
為在線零售網站編寫一份描述

72
00:03:47,880 --> 00:03:50,840
讓我快速運行這三個

73
00:03:50,840 --> 00:03:57,760
然後我們會有如下的提示

74
00:03:57,760 --> 00:04:01,440
我就把這個粘貼進去

75
00:04:01,440 --> 00:04:03,400
所以我的提示是在這裡說

76
00:04:03,400 --> 00:04:05,880
你的任務是基於一份技術性的信息表

77
00:04:05,880 --> 00:04:08,960
幫助一個營銷團隊，為零售網站

78
00:04:08,960 --> 00:04:11,200
寫一個產品描述，等等

79
00:04:11,200 --> 00:04:16,880
所以這是我第一次嘗試向大語言模型解釋任務

80
00:04:16,880 --> 00:04:19,080
因此，讓我點擊Shift Enter

81
00:04:19,080 --> 00:04:22,240
而這需要幾秒鐘的時間來運行

82
00:04:22,360 --> 00:04:25,000
然後我們得到這個結果

83
00:04:25,000 --> 00:04:29,200
看起來它已經完成了一個很好的描述工作

84
00:04:29,200 --> 00:04:31,600
介紹一個令人驚嘆的中世紀風格的辦公椅

85
00:04:31,600 --> 00:04:33,560
完美的補充，等等

86
00:04:33,560 --> 00:04:34,920
但是，當我看到這個時

87
00:04:34,920 --> 00:04:36,560
發現這內容是真的長

88
00:04:36,560 --> 00:04:39,600
它做得很好，正是我要求它做的

89
00:04:39,600 --> 00:04:44,680
這就是從技術概況表開始，寫一個產品描述

90
00:04:44,680 --> 00:04:46,760
但是，當我看到這個時，我就會說

91
00:04:46,760 --> 00:04:50,360
內容有點長，也許我們希望它能短一點

92
00:04:50,360 --> 00:04:52,920
所以我有一個想法

93
00:04:52,920 --> 00:04:54,720
我寫了一個提示，得到了一個結果

94
00:04:54,720 --> 00:04:56,880
我對它不是那麼滿意，因為它太長了

95
00:04:56,880 --> 00:05:02,120
因此，我將讓提示更清晰

96
00:05:02,120 --> 00:05:10,080
嗯，並說，最多使用50個字，以嘗試提供

97
00:05:10,080 --> 00:05:15,080
更好地指導所需的長度，然後我們再運行一次

98
00:05:19,280 --> 00:05:24,800
好的。這實際上看起來是一個更好的簡短描述，呃

99
00:05:24,800 --> 00:05:28,480
介紹一個中世紀風格的辦公椅的產品，諸如此類

100
00:05:28,480 --> 00:05:29,920
5個輪子支撐，對

101
00:05:29,920 --> 00:05:31,560
既時尚又實用

102
00:05:31,560 --> 00:05:37,440
不錯。嗯，讓我再檢查一下這個的長度是多少

103
00:05:37,440 --> 00:05:39,720
所以我打算把答复，拆開來

104
00:05:39,720 --> 00:05:41,040
根據空間的位置

105
00:05:41,040 --> 00:05:42,760
然後，你知道，打印出長度

106
00:05:42,760 --> 00:05:43,920
所以它是52個字

107
00:05:43,920 --> 00:05:45,000
這其實還不錯

108
00:05:45,000 --> 00:05:48,600
嗯，這大語言模型還不錯

109
00:05:48,600 --> 00:05:53,360
但在遵循關於非常精確的字數的指示方面，效果就不是那麼好

110
00:05:53,360 --> 00:05:54,480
但這實際上還不錯

111
00:05:54,480 --> 00:05:58,960
有時它會打印出60或65個單詞長度的內容

112
00:05:58,960 --> 00:06:01,360
但這是在合理範圍內的

113
00:06:01,360 --> 00:06:04,080
你可以嘗試做的一些事情是

114
00:06:04,080 --> 00:06:09,480
嗯，就是說，最多使用三個句子

115
00:06:13,160 --> 00:06:16,440
讓我再試一次

116
00:06:16,440 --> 00:06:18,520
但這些都是不同的方式來告訴

117
00:06:18,520 --> 00:06:21,880
這些是告訴大型語言模型你想要的輸出的長度的不同方法

118
00:06:21,880 --> 00:06:25,120
所以這是1、2、3

119
00:06:25,120 --> 00:06:26,200
我數了一下有三個句子

120
00:06:26,200 --> 00:06:28,200
看起來我做得很好

121
00:06:28,200 --> 00:06:32,280
嗯，然後我也看到人們有時會做一些事情，比如

122
00:06:32,280 --> 00:06:35,920
呃，我不知道，最多使用280個字符

123
00:06:35,920 --> 00:06:40,040
大語言模型，因為它們解釋文本的方式

124
00:06:40,040 --> 00:06:41,680
是使用一種叫做標記器的東西

125
00:06:41,680 --> 00:06:43,260
這我就不說了

126
00:06:43,260 --> 00:06:47,760
但是，嗯，他們在計算字符方面往往很一般

127
00:06:47,760 --> 00:06:51,480
但是讓我們看看，281個字符

128
00:06:51,480 --> 00:06:52,720
這實際上是出乎意料的接近

129
00:06:52,720 --> 00:06:56,320
通常情況下，一個大語言模型是無法達到這麼接近的

130
00:06:56,320 --> 00:06:57,520
但這些是不同的方法

131
00:06:57,520 --> 00:07:01,400
他們可以嘗試控制你得到的輸出的長度

132
00:07:01,400 --> 00:07:06,560
但是，讓我把它切換回最多使用50個詞

133
00:07:08,120 --> 00:07:11,960
這就是我們剛才的結果

134
00:07:11,960 --> 00:07:15,600
當我們繼續為我們的網站完善這個文本時

135
00:07:15,600 --> 00:07:18,400
我們可能會決定，孩子

136
00:07:18,400 --> 00:07:21,900
這個網站並不是直接面向消費者銷售的

137
00:07:21,900 --> 00:07:25,080
實際上是要把家具賣給

138
00:07:25,080 --> 00:07:28,720
家具零售商，他們會對以下方面更感興趣

139
00:07:28,720 --> 00:07:32,480
椅子的技術細節和椅子的材料

140
00:07:32,480 --> 00:07:35,160
在這種情況下，你可以拿著這個提示說

141
00:07:35,160 --> 00:07:41,880
我想修改這個提示，讓它對技術細節更加精確

142
00:07:41,880 --> 00:07:46,240
所以讓我繼續修改這個提示

143
00:07:46,240 --> 00:07:50,960
而我要說的是，這個描述是為家具零售商準備的

144
00:07:50,960 --> 00:07:52,880
所以應該更偏向技術，專注於材料

145
00:07:52,880 --> 00:07:55,120
產品和構造

146
00:07:55,120 --> 00:07:57,640
讓我們運行這個

147
00:07:57,640 --> 00:08:00,840
讓我們看看

148
00:08:00,840 --> 00:08:03,040
還不錯，你知道

149
00:08:03,040 --> 00:08:08,120
塗層鋁基和氣動椅，高質量的材料

150
00:08:08,120 --> 00:08:10,080
因此，通過改變提示

151
00:08:10,080 --> 00:08:14,280
你可以讓它更專注於特定內容

152
00:08:14,280 --> 00:08:17,200
在你想要的特定特徵上

153
00:08:17,200 --> 00:08:19,840
而當我看這個的時候

154
00:08:19,840 --> 00:08:23,200
我可能會決定在描述的最後

155
00:08:23,200 --> 00:08:28,360
我也想包括產品的ID

156
00:08:28,360 --> 00:08:30,080
所以這把椅子的兩個產品

157
00:08:30,080 --> 00:08:33,320
SWC 110，SWC 100

158
00:08:33,320 --> 00:08:39,280
因此，也許我可以進一步改進這個提示

159
00:08:39,280 --> 00:08:41,920
並讓它給我產品的ID

160
00:08:41,920 --> 00:08:44,760
我可以在描述的末尾添加這個指令

161
00:08:44,760 --> 00:08:48,320
在技術規範中，用7個字符來描述每一個產品ID

162
00:08:48,320 --> 00:08:53,640
然後讓我們運行它，看看會發生什麼

163
00:08:53,640 --> 00:08:57,880
於是它說，介紹你的行政部門的文件辦公椅

164
00:08:57,880 --> 00:09:02,520
外殼顏色，談到塑料塗層，鋁製底座

165
00:09:02,520 --> 00:09:05,960
實用性，一些選項

166
00:09:05,960 --> 00:09:08,080
談到了兩個產品ID

167
00:09:08,080 --> 00:09:10,080
所以這看起來很不錯

168
00:09:10,080 --> 00:09:14,520
而你剛才看到的是一個簡短的迭代例子

169
00:09:14,520 --> 00:09:18,920
提示開發的一個簡短例子，許多開發者都會經歷

170
00:09:18,920 --> 00:09:22,080
而我認為一個準則是

171
00:09:22,080 --> 00:09:26,520
在上一個影片中，你看到Isa分享了一些最佳做法

172
00:09:26,520 --> 00:09:30,640
因此，我通常所做的是將這樣的最佳實踐銘記在心

173
00:09:30,640 --> 00:09:33,080
清楚和具體，如果有必要的話

174
00:09:33,080 --> 00:09:35,160
給予模型思考的時間

175
00:09:35,160 --> 00:09:39,880
考慮到這些，經常在寫提示時進行第一次嘗試是值得的

176
00:09:39,880 --> 00:09:44,880
看看會發生什麼，然後再從那裡反复完善提示，以獲得

177
00:09:44,880 --> 00:09:49,480
越來越接近你需要的結果

178
00:09:49,480 --> 00:09:53,920
因此，你可能會看到在各種項目中使用的許多成功的提示語

179
00:09:53,920 --> 00:09:58,600
是通過這樣的迭代過程得出的

180
00:09:58,600 --> 00:10:04,040
為了好玩，讓我給你看一個更複雜的提示的例子，它可以

181
00:10:04,040 --> 00:10:07,600
讓你感受一下ChatGPT的功能

182
00:10:07,600 --> 00:10:11,360
我只是在這裡添加了一些額外的指令

183
00:10:11,360 --> 00:10:14,880
在描述之後，包括一個給出產品尺寸的表格

184
00:10:14,880 --> 00:10:17,160
然後，把所有東西都格式化為HTML

185
00:10:17,160 --> 00:10:20,880
所以，讓我們再次運行

186
00:10:20,880 --> 00:10:24,560
在實踐中，你最終會得到這樣的提示

187
00:10:24,560 --> 00:10:26,720
其實只有在多次反復之後才會出現

188
00:10:26,720 --> 00:10:31,360
我想我不知道有誰會在第一次就寫出這樣準確的提示語

189
00:10:31,360 --> 00:10:35,560
他們試圖讓系統處理一個信息表

190
00:10:35,560 --> 00:10:40,160
因此，這實際上輸出了一堆HTML

191
00:10:40,160 --> 00:10:47,080
讓我們顯示一下HTML，看看這是否是有效的HTML，看看這是否有效

192
00:10:47,080 --> 00:10:49,680
我不知道它是否能工作，但讓我們看看

193
00:10:49,680 --> 00:10:50,640
哦，太好了。不錯

194
00:10:50,640 --> 00:10:51,920
看來它成功渲染了

195
00:10:51,920 --> 00:10:55,960
所以它有一個非常漂亮的椅子描述

196
00:10:55,960 --> 00:11:01,560
結構、材料、產品尺寸

197
00:11:01,560 --> 00:11:07,240
哦，看來我漏掉了最多使用50個字的說明

198
00:11:07,240 --> 00:11:09,440
所以這有點長，但如果你想要調整的話

199
00:11:09,440 --> 00:11:11,960
你可以隨意暫停影片

200
00:11:11,960 --> 00:11:17,160
告訴它要更簡潔，並重新生成這個，看看你得到什麼結果

201
00:11:17,160 --> 00:11:20,200
因此，我希望你能從這個影片中得到啟發，即

202
00:11:20,200 --> 00:11:22,720
提示開發是一個迭代的過程

203
00:11:22,720 --> 00:11:27,240
嘗試一些東西，看看它如何還不能完全滿足你的要求

204
00:11:27,240 --> 00:11:30,320
然後再考慮如何更清楚地描述指示

205
00:11:30,320 --> 00:11:33,960
或者在某些情況下，考慮如何給它更多的空間來思考

206
00:11:33,960 --> 00:11:38,200
以使它更接近於提供你想要的結果

207
00:11:38,200 --> 00:11:42,840
我認為成為一個有效的提示工程師的關鍵在於

208
00:11:42,840 --> 00:11:46,480
他並不在於知道完美的提示

209
00:11:46,480 --> 00:11:49,080
但了解如何用一個更好過程來開發提示

210
00:11:49,080 --> 00:11:52,600
讓應用能夠更加高效

211
00:11:52,600 --> 00:11:58,320
在這段影片中，我只用一個例子說明了開發提示語

212
00:11:58,320 --> 00:12:00,960
對於更複雜的應用

213
00:12:00,960 --> 00:12:04,640
有時你會有多個例子

214
00:12:04,640 --> 00:12:09,360
例如，一個有10個或甚至50個或100個信息表的列表

215
00:12:09,360 --> 00:12:17,280
迭代開發一個提示，並根據大量的案例對其進行評估

216
00:12:17,280 --> 00:12:21,280
但是對於大多數應用的早期開發來說

217
00:12:21,280 --> 00:12:26,560
我看到許多人在開發它時就像我一樣只用一個例子

218
00:12:26,560 --> 00:12:28,520
但是，對於更成熟的應用來說

219
00:12:28,520 --> 00:12:35,120
有時，用更多的例子來評估提示可能是有用的

220
00:12:35,120 --> 00:12:40,160
例如，在幾十張信息表上測試不同的提示，以了解

221
00:12:40,160 --> 00:12:44,120
在多個信息表上的平均或最壞情況下的表現如何

222
00:12:44,120 --> 00:12:48,800
但通常情況下，只有當一個應用程序比較成熟時，你才會這樣做

223
00:12:48,800 --> 00:12:50,600
而且你必須有這些指標來推動

224
00:12:50,600 --> 00:12:54,560
你必須有這些指標來推動最後幾步的增量的迅速改進

225
00:12:54,560 --> 00:12:57,520
因此，請大家玩一玩

226
00:12:57,520 --> 00:13:00,240
Jupyter Notebook的例子，嘗試一下

227
00:13:00,240 --> 00:13:03,320
不同的變化，看看你得到了什麼結果

228
00:13:03,320 --> 00:13:06,360
當你完成後，讓我們繼續看下一個影片

229
00:13:06,360 --> 00:13:10,200
我們將討論軟件應用中的一個非常普遍的用途

230
00:13:10,200 --> 00:13:13,280
大語言模型在軟件應用中的一個非常普遍的用途

231
00:13:13,280 --> 00:13:15,480
這就是對文本進行總結

232
00:13:15,480 --> 00:13:25,480
所以，當你準備好了，讓我們繼續看下一個影片

